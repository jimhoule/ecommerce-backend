from django.shortcuts import render
from django.db import transaction, connection
from django.db.models import Func, Value, F
from django.db.models.functions import Concat
from django.contrib.contenttypes.models import ContentType
from store.models import Product, Order, OrderItem, Customer, Collection
from tags.models import Tag, TaggedItem

# NOTE: Another to use transactions is to put the decorator to a function
# @transaction.atomic()
def say_hello(request):
    # NOTE: Creates an object
    # collection = Collection()
    # collection.title = 'Collection example'
    # collection.featured_product = Product(pk=1)
    # collection.save()

    # NOTE: Updates an object
    # collection = Collection.objects.get(pk=1)
    # collection.featured_product = None
    # collection.save()

    # NOTE: Deletes one object
    # Collection.objects.get(pk=1).delete()

    # NOTE: Uses transactions
    # with transaction.atomic():
    #     order = Order()
    #     order.customer = Customer(pk=1)
    #     order.save()

    #     order_item = OrderItem()
    #     order_item.order = order
    #     order_item.product = Product(pk=1)
    #     order_item.quantity = 1
    #     order_item.unit_price = 10.00
    #     order_item.save()

    # NOTE: Deletes mutiple objects
    # Collection.objects.filter(id__lt=5).delete()

    # NOTE: Deletes all objects
    # Collection.delete()

    # NOTE: Uses raw SQL query on model
    # query_set = Product.objects.raw('SELECT * FROM store_product')

    # NOTE: Uses raw SQL query on database connection
    # with connection.cursor() as cursor:
    #     cursor.execute('SELECT * FROM store_product')

    # NOTE: Queries a Generic model using a custom Manager
    # query_set = TaggedItem.objects.get_tags_for(Product, 1)

    # NOTE: Gets 5 most recent Orders with their Order Items and Customer (orderitem_set is a relation name generated by django)
    # query_set = Order.objects.select_related('customer').prefetch_related('orderitem_set').order_by('-placed_at')[:5]

    # NOTE: Customer full_name concatenation
    # query_set = Customer.objects.annotate(
    #     Concat('first_name', Value(' '), 'last_name'),
    # )

    # NOTE: Gets already ordered Products
    query_set = Product.objects.filter(
        id__in=OrderItem.objects.values('product__id').distinct()
    ).order_by('title')

    return render(request, 'hello.html', {'name': 'Charles', 'products': list(query_set)})
